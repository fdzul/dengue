#include <iostream>
#include <iomanip>
#include <vector>
#include <fstream>
#include <sstream>
#include "mpreal.h"

// Copyright 2000 softSurfer, 2012 Dan Sunday
// This code may be freely used and modified for any purpose
// providing that this copyright notice is included with it.
// SoftSurfer makes no warranty for this code, and cannot be held
// liable for any real or imagined damage resulting from its use.
// Users of this code must verify correctness for their application.

using namespace std;
using namespace mpfr;

typedef mpreal float_type;
 
struct Point {
     float_type x; 
     float_type y; 
};

// a Point is defined by its coordinates {int x, y;}
//===================================================================
 

// isLeft(): tests if a point is Left|On|Right of an infinite line.
//    Input:  three points P0, P1, and P2
//    Return: >0 for P2 left of the line through P0 and P1
//            =0 for P2  on the line
//            <0 for P2  right of the line
//    See: Algorithm 1 "Area of Triangles and Polygons"
inline float_type isLeft( const Point &P0, const Point &P1, const Point &P2 ) {
    return ( (P1.x - P0.x) * (P2.y - P0.y)
            - (P2.x -  P0.x) * (P1.y - P0.y) );
}
//===================================================================


// cn_PnPoly(): crossing number test for a point in a polygon
//      Input:   P = a point,
//               V[] = vertex points of a polygon V[n+1] with V[n]=V[0]
//      Return:  0 = outside, 1 = inside
// This code is patterned after [Franklin, 2000]
int cn_PnPoly( const Point &P, const vector<Point*> &V, const int &n ) {
    int cn = 0;    // the  crossing number counter
    int b;
    // loop through all edges of the polygon
    for (int a=0; a<n-1; ++a) {    // edge from V[i]  to V[i+1]
        b = a + 1;
        if (((V[a]->y <= P.y) && (V[b]->y > P.y))     // an upward crossing
                || ((V[a]->y > P.y) && (V[b]->y <=  P.y))) { // a downward crossing
            // compute  the actual edge-ray intersect x-coordinate
            float_type vt = (float_type)(P.y  - V[a]->y) / (V[b]->y - V[a]->y);
            if (P.x <  V[a]->x + vt * (V[b]->x - V[a]->x)) { // P.x < intersect
                ++cn;   // a valid crossing of y=P.y right of P.x
            }
        }
    }
    return (cn&1);    // 0 if even (out), and 1 if  odd (in)

}
//===================================================================


// wn_PnPoly(): winding number test for a point in a polygon
//      Input:   P = a point,
//               V[] = vertex points of a polygon V[n+1] with V[n]=V[0]
//      Return:  wn = the winding number (=0 only when P is outside)
int wn_PnPoly( const Point &P, const vector<Point*> &V, const int &n ) {
    int wn = 0;    // the  winding number counter
    int b;
    // loop through all edges of the polygon
    for (int a=0; a<n-1; ++a) {   // edge from V[i] to  V[i+1]
        b = a + 1;
        if (V[a]->y <= P.y) {          // start y <= P.y                                                     
            if (V[b]->y  > P.y) {     // an upward crossing
                if (isLeft( *V[a], *V[b], P) > 0.0)  {// P left of  edge
                    ++wn;            // have  a valid up intersect
                }
            }
        } else {                        // start y > P.y (no test needed)
            if (V[b]->y  <= P.y) {    // a downward crossing
                if (isLeft( *V[a], *V[b], P) < 0.0)  {// P right of  edge
                    --wn;            // have  a valid down intersect
                }
            }
        }
    }
    return wn;
}
//===================================================================

void loadpixels(const string &pixelFilename, vector<Point*> &pixels) {
    ifstream iss(pixelFilename.c_str());
    if (!iss) {
        cerr << "ERROR: " << pixelFilename << " not found." << endl;
    }

    while (iss) {
        char buffer[500];
        iss.getline(buffer,500);
        istringstream line(buffer);
        float_type x, y;
        if (line >> x >> y) {
            Point* asdf = new Point; asdf->x = x; asdf->y = y;
            pixels.push_back(asdf);
        }
    }
    iss.close();
}


int main() { 
    vector<Point*> pixels;
    loadpixels("tekom_hits", pixels);
    Point me; me.x= 4.99999999999; me.y=4.9999999999;
    const int num_vertices = 194;
    vector<Point*> POLY(num_vertices);
    for (int i = 0; i<num_vertices; ++i) POLY[i] = new Point();
    //Point* POLY = new Point[194];
                                          
    POLY[0]->x = -88.29604399999994;	POLY[0]->y = 20.63480100000004;
    POLY[1]->x = -88.29331199999996;	POLY[1]->y = 20.633511000000055;
    POLY[2]->x = -88.28591099999989;	POLY[2]->y = 20.633871;
    POLY[3]->x = -88.28163999999992;	POLY[3]->y = 20.633140000000083;
    POLY[4]->x = -88.27693799999997;	POLY[4]->y = 20.63290000000012;
    POLY[5]->x = -88.27269699999994;	POLY[5]->y = 20.632882000000052;
    POLY[6]->x = -88.26690599999995;	POLY[6]->y = 20.63294100000013;
    POLY[7]->x = -88.26290799999998;	POLY[7]->y = 20.632909000000154;
    POLY[8]->x = -88.25911799999994;	POLY[8]->y = 20.632640000000094;
    POLY[9]->x = -88.25401299999993;	POLY[9]->y = 20.632431000000054;
    POLY[10]->x = -88.25065499999994;	POLY[10]->y = 20.63142099999999;
    POLY[11]->x = -88.24775599999998;	POLY[11]->y = 20.630630000000053;
    POLY[12]->x = -88.24413199999998;	POLY[12]->y = 20.628210000000024;
    POLY[13]->x = -88.24229299999996;	POLY[13]->y = 20.625699999999995;
    POLY[14]->x = -88.24417799999998;	POLY[14]->y = 20.622040000000027;
    POLY[15]->x = -88.24579599999998;	POLY[15]->y = 20.617210999999998;
    POLY[16]->x = -88.24678799999998;	POLY[16]->y = 20.613131000000124;
    POLY[17]->x = -88.24846699999989;	POLY[17]->y = 20.610189000000048;
    POLY[18]->x = -88.25152599999996;	POLY[18]->y = 20.608360999999945;
    POLY[19]->x = -88.25437299999999;	POLY[19]->y = 20.60678999999999;
    POLY[20]->x = -88.25720999999999;	POLY[20]->y = 20.604981000000066;
    POLY[21]->x = -88.25918599999994;	POLY[21]->y = 20.60392999999999;
    POLY[22]->x = -88.26180299999993;	POLY[22]->y = 20.60213200000004;
    POLY[23]->x = -88.26419099999993;	POLY[23]->y = 20.600110000000086;
    POLY[24]->x = -88.26635599999997;	POLY[24]->y = 20.597861000000023;
    POLY[25]->x = -88.26808199999988;	POLY[25]->y = 20.595399000000043;
    POLY[26]->x = -88.26891999999998;	POLY[26]->y = 20.593459999999993;
    POLY[27]->x = -88.26950199999987;	POLY[27]->y = 20.59011200000009;
    POLY[28]->x = -88.26963099999989;	POLY[28]->y = 20.58654899999999;
    POLY[29]->x = -88.27015799999998;	POLY[29]->y = 20.581770000000006;
    POLY[30]->x = -88.27356799999995;	POLY[30]->y = 20.558122000000026;
    POLY[31]->x = -88.27391899999992;	POLY[31]->y = 20.554059999999993;
    POLY[32]->x = -88.27407799999997;	POLY[32]->y = 20.551211000000023;
    POLY[33]->x = -88.28151699999995;	POLY[33]->y = 20.551330000000064;
    POLY[34]->x = -88.2877959999999;	POLY[34]->y = 20.54962100000006;
    POLY[35]->x = -88.28959699999996;	POLY[35]->y = 20.548590000000047;
    POLY[36]->x = -88.29181699999998;	POLY[36]->y = 20.54659200000009;
    POLY[37]->x = -88.29625599999991;	POLY[37]->y = 20.541892000000075;
    POLY[38]->x = -88.29846899999995;	POLY[38]->y = 20.53895;
    POLY[39]->x = -88.30136199999998;	POLY[39]->y = 20.535041000000035;
    POLY[40]->x = -88.30446599999993;	POLY[40]->y = 20.53065100000009;
    POLY[41]->x = -88.30740999999989;	POLY[41]->y = 20.52864100000005;
    POLY[42]->x = -88.31268199999994;	POLY[42]->y = 20.527018000000055;
    POLY[43]->x = -88.3161169999999;	POLY[43]->y = 20.525710000000004;
    POLY[44]->x = -88.31933499999997;	POLY[44]->y = 20.524411000000157;
    POLY[45]->x = -88.32301299999995;	POLY[45]->y = 20.52263099999999;
    POLY[46]->x = -88.32736199999994;	POLY[46]->y = 20.518939000000046;
    POLY[47]->x = -88.33174199999996;	POLY[47]->y = 20.515268999999932;
    POLY[48]->x = -88.33750899999995;	POLY[48]->y = 20.509199999999964;
    POLY[49]->x = -88.34097999999989;	POLY[49]->y = 20.505800000000022;
    POLY[50]->x = -88.34449899999998;	POLY[50]->y = 20.504300000000114;
    POLY[51]->x = -88.3470989999999;	POLY[51]->y = 20.50377100000003;
    POLY[52]->x = -88.35231899999997;	POLY[52]->y = 20.503429000000153;
    POLY[53]->x = -88.35539999999992;	POLY[53]->y = 20.503370000000075;
    POLY[54]->x = -88.36089299999992;	POLY[54]->y = 20.503040000000112;
    POLY[55]->x = -88.36591399999998;	POLY[55]->y = 20.502021000000013;
    POLY[56]->x = -88.37381799999997;	POLY[56]->y = 20.500049000000104;
    POLY[57]->x = -88.37789999999995;	POLY[57]->y = 20.498130000000117;
    POLY[58]->x = -88.38101999999998;	POLY[58]->y = 20.496460000000127;
    POLY[59]->x = -88.38462099999998;	POLY[59]->y = 20.494080000000054;
    POLY[60]->x = -88.38915199999997;	POLY[60]->y = 20.488870000000077;
    POLY[61]->x = -88.3915399999999;	POLY[61]->y = 20.485089000000073;
    POLY[62]->x = -88.39319699999999;	POLY[62]->y = 20.481791000000044;
    POLY[63]->x = -88.39583599999992;	POLY[63]->y = 20.478709999999978;
    POLY[64]->x = -88.40088699999995;	POLY[64]->y = 20.47515200000015;
    POLY[65]->x = -88.4035419999999;	POLY[65]->y = 20.473011999999983;
    POLY[66]->x = -88.40789099999995;	POLY[66]->y = 20.469921000000056;
    POLY[67]->x = -88.41176499999995;	POLY[67]->y = 20.46800900000011;
    POLY[68]->x = -88.41638999999998;	POLY[68]->y = 20.46774000000005;
    POLY[69]->x = -88.42151499999989;	POLY[69]->y = 20.467702000000088;
    POLY[70]->x = -88.4256519999999;	POLY[70]->y = 20.46673100000004;
    POLY[71]->x = -88.43028299999992;	POLY[71]->y = 20.46458100000001;
    POLY[72]->x = -88.43538599999988;	POLY[72]->y = 20.462429999999983;
    POLY[73]->x = -88.43953599999998;	POLY[73]->y = 20.45957900000002;
    POLY[74]->x = -88.4422239999999;	POLY[74]->y = 20.45791000000014;
    POLY[75]->x = -88.4441839999999;	POLY[75]->y = 20.456491000000142;
    POLY[76]->x = -88.44857099999996;	POLY[76]->y = 20.453639000000067;
    POLY[77]->x = -88.45468099999988;	POLY[77]->y = 20.447960000000023;
    POLY[78]->x = -88.45906899999994;	POLY[78]->y = 20.441350000000057;
    POLY[79]->x = -88.46198399999997;	POLY[79]->y = 20.435001;
    POLY[80]->x = -88.46441599999997;	POLY[80]->y = 20.42863900000009;
    POLY[81]->x = -88.46684999999991;	POLY[81]->y = 20.422520000000077;
    POLY[82]->x = -88.46927699999998;	POLY[82]->y = 20.416170000000136;
    POLY[83]->x = -88.47174099999995;	POLY[83]->y = 20.411700999999994;
    POLY[84]->x = -88.47518899999994;	POLY[84]->y = 20.40862199999998;
    POLY[85]->x = -88.48014199999994;	POLY[85]->y = 20.405310000000043;
    POLY[86]->x = -88.4823679999999;	POLY[86]->y = 20.4034190000001;
    POLY[87]->x = -88.48905999999994;	POLY[87]->y = 20.39844999999997;
    POLY[88]->x = -88.49253799999991;	POLY[88]->y = 20.395619000000067;
    POLY[89]->x = -88.49725999999998;	POLY[89]->y = 20.39067100000011;
    POLY[90]->x = -88.4997489999999;	POLY[90]->y = 20.388079999999945;
    POLY[91]->x = -88.50273199999998;	POLY[91]->y = 20.38361100000003;
    POLY[92]->x = -88.50547899999998;	POLY[92]->y = 20.37961100000001;
    POLY[93]->x = -88.50823199999991;	POLY[93]->y = 20.379129999999975;
    POLY[94]->x = -88.50874199999993;	POLY[94]->y = 20.38147100000009;
    POLY[95]->x = -88.50975899999997;	POLY[95]->y = 20.387090999999998;
    POLY[96]->x = -88.51000999999997;	POLY[96]->y = 20.389200999999957;
    POLY[97]->x = -88.50852099999997;	POLY[97]->y = 20.3978800000001;
    POLY[98]->x = -88.50605099999996;	POLY[98]->y = 20.405401000000097;
    POLY[99]->x = -88.50456899999989;	POLY[99]->y = 20.41103099999998;
    POLY[100]->x = -88.5033269999999;	POLY[100]->y = 20.415491000000088;
    POLY[101]->x = -88.50160899999997;	POLY[101]->y = 20.423240000000135;
    POLY[102]->x = -88.50287599999996;	POLY[102]->y = 20.428400000000067;
    POLY[103]->x = -88.50414299999994;	POLY[103]->y = 20.432840000000056;
    POLY[104]->x = -88.50414999999998;	POLY[104]->y = 20.436131000000046;
    POLY[105]->x = -88.50366899999995;	POLY[105]->y = 20.441760000000045;
    POLY[106]->x = -88.50344799999988;	POLY[106]->y = 20.44715100000002;
    POLY[107]->x = -88.50298299999997;	POLY[107]->y = 20.454191000000094;
    POLY[108]->x = -88.50261599999988;	POLY[108]->y = 20.460600000000113;
    POLY[109]->x = -88.50052599999998;	POLY[109]->y = 20.462890000000073;
    POLY[110]->x = -88.49806199999995;	POLY[110]->y = 20.466430000000003;
    POLY[111]->x = -88.49485799999997;	POLY[111]->y = 20.470200000000034;
    POLY[112]->x = -88.49140999999992;	POLY[112]->y = 20.474220000000116;
    POLY[113]->x = -88.48821199999992;	POLY[113]->y = 20.478229;
    POLY[114]->x = -88.48377199999993;	POLY[114]->y = 20.48271900000009;
    POLY[115]->x = -88.4778829999999;	POLY[115]->y = 20.487462000000107;
    POLY[116]->x = -88.47321299999993;	POLY[116]->y = 20.49101900000005;
    POLY[117]->x = -88.46978699999988;	POLY[117]->y = 20.494570000000067;
    POLY[118]->x = -88.46440899999988;	POLY[118]->y = 20.499309000000153;
    POLY[119]->x = -88.45878599999998;	POLY[119]->y = 20.50358;
    POLY[120]->x = -88.45465899999994;	POLY[120]->y = 20.507370000000094;
    POLY[121]->x = -88.44978999999995;	POLY[121]->y = 20.512340999999992;
    POLY[122]->x = -88.44542799999988;	POLY[122]->y = 20.517549000000145;
    POLY[123]->x = -88.44180199999988;	POLY[123]->y = 20.521570999999994;
    POLY[124]->x = -88.43865199999993;	POLY[124]->y = 20.524892000000023;
    POLY[125]->x = -88.43624799999998;	POLY[125]->y = 20.527971000000036;
    POLY[126]->x = -88.43479099999996;	POLY[126]->y = 20.529621000000134;
    POLY[127]->x = -88.43039699999991;	POLY[127]->y = 20.52918999999997;
    POLY[128]->x = -88.42868799999991;	POLY[128]->y = 20.528030000000115;
    POLY[129]->x = -88.4264839999999;	POLY[129]->y = 20.526640000000043;
    POLY[130]->x = -88.42475899999994;	POLY[130]->y = 20.52547999999996;
    POLY[131]->x = -88.4220739999999;	POLY[131]->y = 20.523862000000065;
    POLY[132]->x = -88.41913599999998;	POLY[132]->y = 20.522950000000094;
    POLY[133]->x = -88.41597699999988;	POLY[133]->y = 20.522510000000068;
    POLY[134]->x = -88.41039999999998;	POLY[134]->y = 20.523259999999993;
    POLY[135]->x = -88.40822599999996;	POLY[135]->y = 20.52445;
    POLY[136]->x = -88.40582999999992;	POLY[136]->y = 20.527059000000065;
    POLY[137]->x = -88.40439699999996;	POLY[137]->y = 20.528721000000075;
    POLY[138]->x = -88.4019919999999;	POLY[138]->y = 20.531321000000105;
    POLY[139]->x = -88.39936899999992;	POLY[139]->y = 20.534870000000126;
    POLY[140]->x = -88.39650599999993;	POLY[140]->y = 20.539131999999938;
    POLY[141]->x = -88.3943319999999;	POLY[141]->y = 20.538440999999978;
    POLY[142]->x = -88.39189799999997;	POLY[142]->y = 20.537290000000155;
    POLY[143]->x = -88.38849799999991;	POLY[143]->y = 20.536609000000112;
    POLY[144]->x = -88.38536099999988;	POLY[144]->y = 20.537109999999984;
    POLY[145]->x = -88.38102599999996;	POLY[145]->y = 20.538090000000068;
    POLY[146]->x = -88.37747099999996;	POLY[146]->y = 20.541660000000036;
    POLY[147]->x = -88.37654099999992;	POLY[147]->y = 20.54356000000007;
    POLY[148]->x = -88.37515299999995;	POLY[148]->y = 20.547350999999992;
    POLY[149]->x = -88.37422999999995;	POLY[149]->y = 20.549949000000026;
    POLY[150]->x = -88.37330699999995;	POLY[150]->y = 20.55278900000002;
    POLY[151]->x = -88.37120099999999;	POLY[151]->y = 20.55589000000009;
    POLY[152]->x = -88.36905599999994;	POLY[152]->y = 20.557110000000137;
    POLY[153]->x = -88.36382399999997;	POLY[153]->y = 20.55649900000003;
    POLY[154]->x = -88.36070299999994;	POLY[154]->y = 20.555619000000036;
    POLY[155]->x = -88.35833099999996;	POLY[155]->y = 20.555200000000013;
    POLY[156]->x = -88.35428499999995;	POLY[156]->y = 20.555059000000085;
    POLY[157]->x = -88.35051799999991;	POLY[157]->y = 20.555619000000036;
    POLY[158]->x = -88.34702399999992;	POLY[158]->y = 20.556900000000155;
    POLY[159]->x = -88.34329299999996;	POLY[159]->y = 20.55865100000011;
    POLY[160]->x = -88.33956199999989;	POLY[160]->y = 20.559471000000087;
    POLY[161]->x = -88.33487599999995;	POLY[161]->y = 20.55914999999999;
    POLY[162]->x = -88.33184699999998;	POLY[162]->y = 20.559011000000055;
    POLY[163]->x = -88.32952899999992;	POLY[163]->y = 20.559321000000125;
    POLY[164]->x = -88.32698799999991;	POLY[164]->y = 20.559881000000075;
    POLY[165]->x = -88.32306599999993;	POLY[165]->y = 20.56096199999996;
    POLY[166]->x = -88.32054999999997;	POLY[166]->y = 20.561759000000052;
    POLY[167]->x = -88.31877199999991;	POLY[167]->y = 20.564911000000052;
    POLY[168]->x = -88.32041099999992;	POLY[168]->y = 20.566272000000026;
    POLY[169]->x = -88.32182399999994;	POLY[169]->y = 20.56787200000008;
    POLY[170]->x = -88.32301299999995;	POLY[170]->y = 20.569480999999996;
    POLY[171]->x = -88.3242259999999;	POLY[171]->y = 20.57228000000015;
    POLY[172]->x = -88.32334199999997;	POLY[172]->y = 20.574210000000107;
    POLY[173]->x = -88.3213199999999;	POLY[173]->y = 20.576410000000067;
    POLY[174]->x = -88.3195189999999;	POLY[174]->y = 20.57884999999999;
    POLY[175]->x = -88.31841199999991;	POLY[175]->y = 20.58078100000006;
    POLY[176]->x = -88.31706899999989;	POLY[176]->y = 20.582490000000064;
    POLY[177]->x = -88.31549899999993;	POLY[177]->y = 20.584208999999987;
    POLY[178]->x = -88.31488099999996;	POLY[178]->y = 20.587071000000037;
    POLY[179]->x = -88.31608499999993;	POLY[179]->y = 20.58963100000011;
    POLY[180]->x = -88.31682599999993;	POLY[180]->y = 20.592211000000077;
    POLY[181]->x = -88.31825899999995;	POLY[181]->y = 20.594280000000026;
    POLY[182]->x = -88.31694899999991;	POLY[182]->y = 20.597409000000084;
    POLY[183]->x = -88.31471999999997;	POLY[183]->y = 20.599871000000064;
    POLY[184]->x = -88.31339299999996;	POLY[184]->y = 20.60205000000002;
    POLY[185]->x = -88.31095899999991;	POLY[185]->y = 20.60522900000001;
    POLY[186]->x = -88.30809899999997;	POLY[186]->y = 20.609621000000118;
    POLY[187]->x = -88.30613599999998;	POLY[187]->y = 20.613261000000023;
    POLY[188]->x = -88.30399399999988;	POLY[188]->y = 20.618090000000052;
    POLY[189]->x = -88.30248999999992;	POLY[189]->y = 20.621951000000138;
    POLY[190]->x = -88.30105599999996;	POLY[190]->y = 20.627701000000002;
    POLY[191]->x = -88.3002469999999;	POLY[191]->y = 20.632000000000062;
    POLY[192]->x = -88.29950599999995;	POLY[192]->y = 20.63820100000015;
    POLY[193]->x = -88.29604399999994;	POLY[193]->y = 20.63480100000004;

    int wn_hit_ct = 0;
    int cn_hit_ct = 0;
    int wn_miss_ct = 0;
    int cn_miss_ct = 0;
    int wn, cn;
    for (unsigned int i = 0; i<pixels.size(); ++i) {
        cout << setprecision(10) << pixels[i]->x << "\t" << setprecision(10) << pixels[i]->y << "\t";
        wn =  wn_PnPoly( *(pixels[i]), POLY, num_vertices );
        if (wn == 0) {++wn_miss_ct;} else {++wn_hit_ct;}
        cout << "wn_PnPoly() " << wn << "\t";

        cn = cn_PnPoly( *(pixels[i]), POLY, num_vertices );
        if (cn == 0) {++cn_miss_ct;} else {++cn_hit_ct;}
        cout << "cn_PnPoly() " << cn << endl;
    }
   
    cout << "wn hits: " << wn_hit_ct << "\twn misses: " << wn_miss_ct << endl;
    cout << "cn hits: " << cn_hit_ct << "\tcn misses: " << cn_miss_ct << endl;
    return 0;
}
